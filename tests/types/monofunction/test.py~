import os, shutil, uuid, signal
import subprocess, threading
import json

ROOT_DIR = '/home/devincube/projects/Preview/tests/'
TEST_COMMON_PATH = 'types/monofunction'

def copy_files(path_from, path_to):
	src_files = os.listdir(path_from)
	for file_name in src_files:
		full_file_name = os.path.join(path_from, file_name)
		if (os.path.isfile(full_file_name)):
		    shutil.copy(full_file_name, path_to)
		    
build_root = '/tmp/build'
			    
def get_build_dir(id):
	return os.path.join(build_root, '%s/' % id)	
	
def get_build_meta(test_rel_path):
	meta_path = os.path.join(ROOT_DIR, test_rel_path, 'meta.json')
	with open(meta_path) as data_file:    
		return json.load(data_file)

def create_build(test_rel_path, user_path):
	if not os.path.exists(build_root):
		os.makedirs(build_root)
	id = uuid.uuid4()
	build_dir = get_build_dir(id);
	os.makedirs(build_dir)
	common_path = os.path.join(ROOT_DIR, TEST_COMMON_PATH, 'src')
	test_path = os.path.join(ROOT_DIR, test_rel_path, 'src')
	user_dir = os.path.join(ROOT_DIR, user_path)
	copy_files(common_path, build_dir)
	copy_files(test_path, build_dir)
	user_src = os.path.join(build_dir, 'src/')
	if not os.path.exists(user_src):
		os.makedirs(user_src)
	copy_files(user_dir, user_src)
	return id	
	
def run_build(id, timeout=3):
	dir = get_build_dir(id)
	make_cmd = Command(['make', '-C', dir], cwd=dir)
	make_cmd.run(shell=False)
	if make_cmd.returncode or make_cmd.errors:
		raise Exception('Make crash: \r\n\t%s' % make_cmd.errors)			
	# run_cmd = Command(['chmod', '-R', '+w', some_folder])
	# run_cmd.run(timeout=timeout)
	#subprocess.call(['chmod', '-R', '-w', dir])	
	os.system('su sandbox')
	run_cmd = Command(['./bin/run'], cwd=dir)
	run_cmd.run(timeout=timeout)
	#subprocess.call(['chmod', '-R', '+w', dir])
	if run_cmd.returncode or run_cmd.errors:
		raise Exception('Run crash: \r\n\t%s' % run_cmd.errors)
	out = run_cmd.output
	if not out: 
		return None	
	try:
		res = json.loads(out)
	except Exception as e:
		raise Exception('Test crash: \r\n\t%s\r\n"""%s"""' % (str(e), out))
	return res
	
def clean_build(id):
	dir = get_build_dir(id)
	print("Cleaning %s" % dir);
	#shutil.rmtree(dir)
	
class Command(object):
	def __init__(self, cmd, cwd):
		self.cmd = cmd
		self.cwd = cwd
		self.process = None
		self.returncode = None
		self.output = None
		self.errors = None
		
	def get_readonly_user():
		pass
		"""
		pw_record = pwd.getpwnam("sandbox")
		user_name      = pw_record.pw_name
		user_home_dir  = pw_record.pw_dir
		user_uid       = pw_record.pw_uid
		user_gid       = pw_record.pw_gid
		env = os.environ.copy()
		env[ 'HOME'     ]  = user_home_dir
		env[ 'LOGNAME'  ]  = user_name
		env[ 'PWD'      ]  = cwd
		env[ 'USER'     ]  = user_name
		"""
		
	def owner(self):
		pid = self.process.pid
		'''Return username of UID of process pid'''
		for ln in open('/proc/%d/status' % pid):
		    if ln.startswith('Uid:'):
		        uid = int(ln.split()[UID])
		        return pwd.getpwuid(uid).pw_name
		
	def run(self, timeout=10, shell=True):
		def target():
			print('Thread started')
			try:
				print("runnning %s" % self.cmd)
				working_dir = self.cwd
				env = os.environ.copy()	

				import pwd
				pw = pwd.getpwnam('sandbox')
				
				env['HOME'] = pw.pw_dir
				env['LOGNAME'] = pw.pw_name
				env['PWD'] = working_dir
				env['USER'] = pw.pw_name
				
				def preexec():					
					print("preexec")
					os.setsid()
					try:
						os.setegid(1001)
						os.seteuid(1001)
					except Exception as e:
						print(str(e))
				
				self.process = subprocess.Popen(self.cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell, preexec_fn=os.setsid, cwd=working_dir, env=env)
				out, err = self.process.communicate()						
				self.output = out
				self.errors = err
			except Exception as e:
				self.errors = str(e)
			print('Thread finished')
			
		thread = threading.Thread(target=target)
		thread.start()
		
		thread.join(timeout)
		if thread.is_alive():
			print('Terminating process %s' % self.process.pid)
			try:
				os.killpg(self.process.pid, signal.SIGTERM)
			except:
				pass
			thread.join()
			self.errors = "Timeout (%s sec)" % timeout
		self.returncode = self.process.returncode
		result = (self.returncode, self.output, self.errors)	
		# print('%s \n%s \n%s' % result)
		return result
		
class MonoFunctionTest(object):
	def __init__(self, test_path, user_path):					
		self.test_path = test_path
		self.user_path = user_path
	
	def run(self, timeout):
		id = create_build(self.test_path, self.user_path)	
		try:
			res = run_build(id, timeout=timeout)		
			print(res)
		except Exception as e:
			print("Build exception: \r\n\t%s" % str(e))
		finally:	
			pass
			clean_build(id)
	
if __name__ == "__main__":
	test_name = 'c/indexPower'
	test = test_name
	user = test_name + '/example/'
	meta = get_build_meta(test)
	timeout = int(meta['timeout'])
	if meta['type'] == 'monofunction':
		test_suite = MonoFunctionTest(test, user)
		test_suite.run(timeout)
	pass	

